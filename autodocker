#!/usr/bin/env node-dev
process.env.DEBUG   = process.env.DEBUG || "*,-stdout*,-portastic*"
global.configPath   = '/etc/autodocker/config.js'

const R             = require('ramda')
const hook          = require('./hook')
const fs            = require('fs')
const {spawn, exec} = require('./process')
const config        = require(configPath)
const proxyRules    = require('./proxyRules')
const git           = require('./git')
const docker        = require('./docker')

const buildBranches = ({cwd, refs, name}) => {
  git.updateBranches(cwd)
  
  sequence = Promise.resolve()
  R.map(ref => {
    let {branch, commit, message, image} = git.parseRef(ref, name)
    let port = null
    sequence = sequence
    .then( () => {
      let running = docker.getRunning(image)
      if (R.contains(ref, git.getLocalBranchesHEAD(cwd)) && running) {
        proxyRules.add(image, running.ports[0])
        return Promise.resolve()
      }
        
      hook('branch:checkout')(branch, commit, message)
      
      git.checkout({branch, cwd})
      git.pull(cwd)
      return Promise.resolve()
        .then(() => docker.build({image, cwd}))
        .then(() => docker.getImageRunPortsOrFreePorts(image))
        .then(ports => port = R.head(ports))
        .then(() => docker.remove(image))
        .then(() => docker.runImageOnPort(image, cwd, port))
        .then(() => proxyRules.add(image, port))
        .catch(hook('autodocker:error'))
    })
  }, refs)
  
  return sequence
}
const wait = () => new Promise(resolve => setTimeout(resolve, 1000))

const processRepo = (path) => {
  const name = R.takeLast(2, path.replace('.git','').split('/')).join('/')
  const cwd = [config.workdir,name].join('/')
  git.cloneIfNotExists({path, cwd})
  return buildBranches({cwd, name, refs: git.getRemoteBranchesHEAD(cwd)})
  .then(proxyRules.write)
  .then(wait)
}

const start = () => {
  return Promise.all(
    R.map(processRepo, config.repositories)
  )
  .then(start)
  .catch(hook('autodoker:error'))
}
start()
