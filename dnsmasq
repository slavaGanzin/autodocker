#!/usr/bin/env node
process.env.DEBUG = process.env.DEBUG || "*"
global.configPath = '/etc/autodocker/config.js'

const R             = require('ramda')
const {spawn, exec} = require('./process')
const ip            = require("ip")
const fs            = require('fs')
const config        = require('./config')
const debug         = R.memoize(require('debug'))
const proxyRules    = require('./proxyRules')


const localIp = ip.address()
const imageToDnsmasq = R.map(image => `address=/${image}/${localIp}`)
const runningHosts = R.pluck(0, proxyRules.get())

const newConf = imageToDnsmasq(runningHosts).join('\n')
const oldConf = fs.readFileSync(config.dnsmasqConf, 'utf8')

const tick = () => {
  if (newConf != oldConf) {
    fs.writeFileSync(config.dnsmasqConf, newConf)
    debug('dnsmasq')("\n"+newConf+"\n")
    exec('pkill dnsmasq; dnsmasq')
    debug('dnsmasq')('reloaded')
  }
}

setInterval(tick, 1000)
