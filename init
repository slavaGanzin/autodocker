#!/usr/bin/env node

global.configPath   = '/etc/autodocker/config.js'

const fs            = require('fs')
const { execSync }  = require('child_process')
const R             = require('ramda')
const debug         = R.memoize(require('debug'))
const path          = require('path')

const createDirIfNotExists = (dir) => {
  try {
    fs.statSync(dir)
  } catch (e) {
    debug('init')(`mkdir ${dir}`)
    execSync(`mkdir ${dir}`)
  }
}

const copyConfigIfNotExists = () => {
  try {
    fs.statSync(configPath)
  } catch (e) {
    debug('init')(`config copied to ${configPath}`)
    execSync(`cp config.js ${configPath}`)
  }
}

const createFileIfNotExists = file => {
  try {
    fs.statSync(file)
  } catch (e) {
    debug('init')(`create ${file}`)
    fs.writeFileSync(file, '')
  }
}

createDirIfNotExists(path.dirname(configPath))
copyConfigIfNotExists()
const {logdir,workdir, dnsmasqConf, rulesFile, user} = require(configPath)
const chown = dir => execSync(`chown -R ${user}:${user} ${dir}`)
R.ap([createDirIfNotExists, chown], [logdir, workdir])
R.ap([createFileIfNotExists, chown], [dnsmasqConf, rulesFile])

const addConf = `conf-file=${dnsmasqConf}`
execSync(`grep -E ${addConf} /etc/dnsmasq.conf || echo ${addConf} >> /etc/dnsmasq.conf`)
